MODEL MATH6161
  uses "mmxprs"
DECLARATIONS
    months = 1..3
    products = 1..2 !Standard, Dairy
    oranges = 1..3 !Hamlin, Pera, Valencia

    boxes: array(products,months,oranges) OF mpvar !boxes of oranges
    product: array(products,months,oranges) OF mpvar !Full products ready to sell
    inventory: array(products,months,oranges) OF mpvar !Juices in inventory
    plants: array(months) OF mpvar !plants working time
    truckloads: array(products,months) OF mpvar !Task 3 variable

    supply: array(months,oranges) OF REAL !values of supply
    demand: array(months,products) OF REAL  !values of demand. Numbers in boxes, because I am assuming, company create boxes as integer
    price: array(products) OF REAL !price of products
    tonnes: array(oranges) OF REAL !ratio to convert boxes to juices
    lower_ratio: array(products,oranges) OF REAL !limits on the percentages of juices, lower bound
    upper_ratio: array(products,oranges) OF REAL !limits on the percentages of juices, upper bound
    capacities: array(oranges) OF REAL !Task 2 capacities sizes for oranges

END-DECLARATIONS
    demand:: [500,200,
            1500,100,
            700,100]
    supply:: [300000,250000,0,
            350000,350000,50000,
            100000,500000,100000]
    price:: [1000,1100]
    tonnes:: [3.5,3.7,3.4]
    capacities:: [1.1, 1, 0.9] !Hamlin, Pera, Valencia
    lower_ratio:: [0,0.6,0,
                0,0.5,0.15]
    upper_ratio:: [0.25,1,0.40,
                0.30,1,0.50]
    lambda:= 0
!Task 1
!maximisation
    maxreturn:= sum(p in products, m in months)(sum(o in oranges)(product(p,m,o))*price(p)) - !Total revenue
    sum(p in products, m in months, o in oranges)(boxes(p,m,o)) -!Expenses of boxes
    sum(p in products, m in months, o in oranges)(inventory(p,m,o) - product(p,m,o))*10 - !Expenses of inventory
    sum(m in months)(500000*plants(m)) !Expenses of plants
!Meet supply
    forall(m in months,o in oranges) do
    boxes_constraint(m,o):= sum(p in products)(boxes(p,m,o)) <= supply(m,o)
    end-do
!Give values to boxes as integers
    forall(p in products, m in months,o in oranges) do
    boxes_integers(p,m,o):= boxes(p,m,o) is_integer
    end-do
!Meet demand
    forall(m in months,p in products) do
    juices_constraint(m,p):= sum(o in oranges)(product(p,m,o)) <= demand(m,p)
    end-do
!Inventory; (boxes(p,m,o)/1000) to convert boxes units in 1000s of boxes, to have tonnes in invetory
    forall(p in products, o in oranges, m in months|m=1) do
    total_inventory(p,m,o):=  inventory(p,m,o) = tonnes(o)*(boxes(p,m,o)/1000)
    selling_juices(p,m,o):=  product(p,m,o) <= inventory(p,m,o)
    end-do
    forall(p in products, o in oranges, m in months|m>1) do
    total_inventory(p,m,o):=  inventory(p,m,o) = inventory(p,m-1,o) - product(p,m-1,o) + tonnes(o)*(boxes(p,m,o)/1000)
    selling_juices(p,m,o):=  product(p,m,o) <= inventory(p,m,o)
    inventory_constraint(p,o):=  product(p,3,o) - inventory(p,3,o) = 0
    end-do
!Factory
    forall(p in products,m in months) do
    plants_constraint(p,m):= sum(o in oranges)(boxes(p,m,o)/1000) <= plants(m)*10000000 !if non of oranges produces, plant can have zero value
    end-do

    forall(m in months) do
    plants_constraint1(m):= plants(m) is_binary
    end-do
!Ratio. Meeting limits on the percentage of juice of each variety allowed in each products
 forall(p in products,m in months, o in oranges) do
    ratio_lower(p,m,o):= product(p,m,o) >= lower_ratio(p,o)*sum(i in oranges)(product(p,m,i))
    ratio_upper(p,m,o):= product(p,m,o) <= upper_ratio(p,o)*sum(i in oranges)(product(p,m,i))
 end-do
!Variables have to be equal or more than zero
forall(p in products,m in months, o in oranges) do
    boxes_zero(p,m,o):= boxes(p,m,o) >= 0!boxes of oranges
    product_zero(p,m,o):= product(p,m,o) >= 0!Full products ready to sell
    inventory_zero(p,m,o):= inventory(p,m,o) >= 0!Juices in inventory
    plants_zero(p,m,o):= plants(m) >= 0!plants working time
end-do
maximise(maxreturn)
!!!Writing Summary for Task 1
writeln("")
writeln("Task 1")
writeln("")
writeln("Total Boxes (Oranges per 1 unit) produced Task 1:")
writeln("Month   |   Hamlin   |   Hamlin_Limit   |   Pera         |   Pera_Limit   |   Valencia   |   Valencia_Limit:")
forall(m in months) do
    writeln(m,"       |      ",sum(p in products)(getsol(boxes(p,m,1))),"     |      ",supply(m,1),
    "      |     ",sum(p in products)(getsol(boxes(p,m,2))),"     |     ",supply(m,2),
    "     |     ",sum(p in products)(getsol(boxes(p,m,3))),"        |     ", supply(m,3))
end-do

writeln("")
writeln("Boxes (Oranges per 1 unit) for Standard Task 1:")
writeln("Month      |        Hamlin      |       Pera       |       Valencia:")
writeln(1,"          |       ",getsol(boxes(1,1,1)),"            |       ",getsol(boxes(1,1,2)),"     |       ",getsol(boxes(1,1,3)) )
writeln(2,"          |       ",getsol(boxes(1,2,1)),"       |       ",getsol(boxes(1,2,2)),"     |       ",getsol(boxes(1,2,3)) )
writeln(3,"          |       ",getsol(boxes(1,3,1)),"            |       ",getsol(boxes(1,3,2)),"          |       ",getsol(boxes(1,3,3)) )

writeln("")
writeln("Boxes (Oranges per 1 unit) for Diary Task 1:")
writeln("Month      |       Hamlin      |       Pera      |       Valencia:")
writeln(1,"          |       ",getsol(boxes(2,1,1)),"           |       ",getsol(boxes(2,1,2)),"         |       ",getsol(boxes(2,1,3)) )
writeln(2,"          |       ",getsol(boxes(2,2,1)),"       |       ",getsol(boxes(2,2,2)),"     |       ",getsol(boxes(2,2,3)) )
writeln(3,"          |       ",getsol(boxes(2,3,1)),"           |       ",getsol(boxes(2,3,2)),"         |       ",getsol(boxes(2,3,3)) )

writeln("")
writeln("Inventory (Juices in tonnes) for Standard Task 1:")
writeln("Month      |       Hamlin      |       Pera         |       Valencia:")
writeln(1,"          |       ",getsol(inventory(1,1,1)),"           |       ",getsol(inventory(1,1,2)),"     |       ",getsol(inventory(1,1,3)) )
writeln(2,"          |       ",getsol(inventory(1,2,1)),"    |       ",getsol(inventory(1,2,2)),"      |       ",getsol(inventory(1,2,3)) )
writeln(3,"          |       ",getsol(inventory(1,3,1)),"         |       ",getsol(inventory(1,3,2)),"          |       ",getsol(inventory(1,3,3)) )

writeln("")
writeln("Inventory (Juices in tonnes)  for Diary Task 1:")
writeln("Month      |       Hamlin      |       Pera          |       Valencia:")
writeln(1,"          |       ",getsol(inventory(2,1,1)),"           |       ",getsol(inventory(2,1,2)),"        |       ",getsol(inventory(2,1,3)) )
writeln(2,"          |       ",getsol(inventory(2,2,1)),"     |       ",getsol(inventory(2,2,2)),"      |       ",getsol(inventory(2,2,3)) )
writeln(3,"          |       ",getsol(inventory(2,3,1)),"     |       ",getsol(inventory(2,3,2)),"      |       ",getsol(inventory(2,3,3)) )

writeln("")
writeln("Products (Juices in tonnes)  for Standard Task 1:")
writeln("Month      |       Hamlin        |       Pera      |       Valencia      |       Limit:")
writeln(1,"          |       ",getsol(product(1,1,1)),"             |       ",getsol(product(1,1,2)),
"       |       ",getsol(product(1,1,3)),"             |       ", getsol(demand(1,1)) )
writeln(2,"          |       ",getsol(product(1,2,1)),"      |       ",getsol(product(1,2,2)),
" 	|       ",getsol(product(1,2,3)),"       |       ", getsol(demand(2,1)) )
writeln(3,"          |       ",getsol(product(1,3,1)),"           |       ",getsol(product(1,3,2)),
"       |       ",getsol(product(1,3,3)),"             |       ", getsol(demand(3,1)) )

writeln("")
writeln("Products (Juices in tonnes) for Diary Task 1:")
writeln("Month      |       Hamlin      |       Pera      |       Valencia      |       Limit:")
writeln(1,"          |       ",getsol(product(2,1,1)),"           |       ",getsol(product(2,1,2)),
"         |       ",getsol(product(2,1,3)),"             |       ", getsol(demand(1,2)))
writeln(2,"          |       ",getsol(product(2,2,1)),"          |       ",getsol(product(2,2,2)),
"  |       ",getsol(product(2,2,3)),"      |       ", getsol(demand(2,2)))
writeln(3,"          |       ",getsol(product(2,3,1)),"     |       ",getsol(product(2,3,2)),
"  |       ",getsol(product(2,3,3)),"      	|       ", getsol(demand(3,2)))

writeln("")
writeln("Final products in tonnes for Task 1:")
writeln("Month      |       Standard      |     Diary:")
writeln(1,"          |       ",sum(o in oranges)getsol(product(1,1,o)),"           |       ",sum(o in oranges)getsol(product(2,1,o)))
writeln(2,"          |       ",sum(o in oranges)getsol(product(1,2,o)),"          |       ",sum(o in oranges)getsol(product(2,2,o)))
writeln(3,"          |       ",sum(o in oranges)getsol(product(1,3,o)),"           |       ",sum(o in oranges)getsol(product(2,3,o)))

writeln("")
writeln("Ratios for Standard product Task 1:")
writeln("Month           |       Hamlin       |       Pera      |       Valencia:")
writeln(1,"               |       ",getsol(product(1,1,1))/sum(o in oranges)(getsol(product(1,1,o))),"            |       ",getsol(product(1,1,2))/sum(o in oranges)(getsol(product(1,1,o))),
"         |       ",getsol(product(1,1,3))/sum(o in oranges)(getsol(product(1,1,o))))
writeln(2,"               |       ",getsol(product(1,2,1))/sum(o in oranges)(getsol(product(1,2,o)))," 	|       ",getsol(product(1,2,2))/sum(o in oranges)(getsol(product(1,2,o))),
" |       ",getsol(product(1,2,3))/sum(o in oranges)(getsol(product(1,2,o))))
writeln(3,"               |       ",getsol(product(1,3,1))/sum(o in oranges)(getsol(product(1,3,o))),"         |       ",getsol(product(1,3,2))/sum(o in oranges)(getsol(product(1,3,o))),
"      |       ",getsol(product(1,3,3))/sum(o in oranges)(getsol(product(1,3,o))))

writeln("")
writeln("Ratios for Diary product Task 1:")
writeln("Month      |        Hamlin      |       Pera         |       Valencia:")
writeln(2,"          |       ",getsol(product(2,2,1))/sum(o in oranges)(getsol(product(2,2,o))),"          |       ",getsol(product(2,2,2))/sum(o in oranges)(getsol(product(2,2,o))),
"    |       ",getsol(product(2,2,3))/sum(o in oranges)(getsol(product(2,2,o))))
writeln(3,"          |       ",getsol(product(2,3,1))/sum(o in oranges)(getsol(product(2,3,o)))," |       ",getsol(product(2,3,2))/sum(o in oranges)(getsol(product(2,3,o))),
"		 |       ",getsol(product(2,3,3))/sum(o in oranges)(getsol(product(2,3,o))))

writeln("")
writeln("Plants working time Task 1:")
forall(m in months) do
writeln(m," month, 1 - Yes, 0 - No:  ",getsol(plants(m)))
end-do

writeln("")
writeln("Total profit (Task 1) £ :", getobjval, " £")

!Task 2
writeln("")
writeln("Task 2")
writeln("")
!capacities
    forall(m in months) do
        capacity_constraint1(m):= sum(o in oranges,p in products)(boxes(p,m,o)*capacities(o)) <= 500000
    end-do

maximise(maxreturn)

!!!Writing Summary for Task 2
writeln("")
writeln("Task 2")
writeln("")
writeln("Total Boxes (Oranges per 1 unit) produced Task 2:")
writeln("Month   |   Hamlin    |   Hamlin_Limit   |   Pera         |   Pera_Limit   |   Valencia   |   Valencia_Limit:")
forall(m in months) do
    writeln(m,"       |      ",sum(p in products)(getsol(boxes(p,m,1))),"  |      ",supply(m,1),
    "      |     ",sum(p in products)(getsol(boxes(p,m,2))),"     |     ",supply(m,2),
    "     |     ",sum(p in products)(getsol(boxes(p,m,3))),"        |     ", supply(m,3))
end-do

writeln("")
writeln("Boxes (Oranges per 1 unit) for Standard Task 2:")
writeln("Month      |        Hamlin      |       Pera       |       Valencia:")
writeln(1,"          |       ",getsol(boxes(1,1,1)),"        |       ",getsol(boxes(1,1,2)),"     |       ",getsol(boxes(1,1,3)) )
writeln(2,"          |       ",getsol(boxes(1,2,1)),"       |       ",getsol(boxes(1,2,2)),"     |       ",getsol(boxes(1,2,3)) )
writeln(3,"          |       ",getsol(boxes(1,3,1)),"            |       ",getsol(boxes(1,3,2)),"          |       ",getsol(boxes(1,3,3)) )

writeln("")
writeln("Boxes (Oranges per 1 unit) for Diary Task 2:")
writeln("Month      |       Hamlin      |       Pera      |       Valencia:")
writeln(1,"          |       ",getsol(boxes(2,1,1)),"       |       ",getsol(boxes(2,1,2)),"         |       ",getsol(boxes(2,1,3)) )
writeln(2,"          |       ",getsol(boxes(2,2,1)),"           |       ",getsol(boxes(2,2,2)),"     |       ",getsol(boxes(2,2,3)) )
writeln(3,"          |       ",getsol(boxes(2,3,1)),"           |       ",getsol(boxes(2,3,2)),"         |       ",getsol(boxes(2,3,3)) )

writeln("")
writeln("Inventory (Juices in tonnes) for Standard Task 2:")
writeln("Month      |       Hamlin      |       Pera         |       Valencia:")
writeln(1,"          |       ",getsol(inventory(1,1,1)),"     |       ",getsol(inventory(1,1,2)),"     |       ",getsol(inventory(1,1,3)) )
writeln(2,"          |       ",getsol(inventory(1,2,1)),"      |       ",getsol(inventory(1,2,2)),"         |       ",getsol(inventory(1,2,3)) )
writeln(3,"          |       ",getsol(inventory(1,3,1)),"      |       ",getsol(inventory(1,3,2)),"          |       ",getsol(inventory(1,3,3)) )

writeln("")
writeln("Inventory (Juices in tonnes)  for Diary Task 2:")
writeln("Month      |       Hamlin      |       Pera          |       Valencia:")
writeln(1,"          |       ",getsol(inventory(2,1,1)),"       |       ",getsol(inventory(2,1,2)),"        |       ",getsol(inventory(2,1,3)) )
writeln(2,"          |       ",getsol(inventory(2,2,1)),"      |       ",getsol(inventory(2,2,2)),"      |       ",getsol(inventory(2,2,3)) )
writeln(3,"          |       ",getsol(inventory(2,3,1)),"    |       ",getsol(inventory(2,3,2)),"      |       ",getsol(inventory(2,3,3)) )

writeln("")
writeln("Products (Juices in tonnes)  for Standard Task 2:")
writeln("Month      |       Hamlin        |       Pera      |       Valencia      |       Limit:")
writeln(1,"          |       ",getsol(product(1,1,1)),"       |       ",getsol(product(1,1,2)),
"  |       ",getsol(product(1,1,3)),"             |       ", getsol(demand(1,1)) )
writeln(2,"          |       ",getsol(product(1,2,1)),"           |       ",getsol(product(1,2,2)),
"      |       ",getsol(product(1,2,3)),"             |       ", getsol(demand(2,1)) )
writeln(3,"          |       ",getsol(product(1,3,1)),"           |       ",getsol(product(1,3,2)),
"       |       ",getsol(product(1,3,3)),"        |       ", getsol(demand(3,1)) )

writeln("")
writeln("Products (Juices in tonnes) for Diary Task 2:")
writeln("Month      |       Hamlin      |       Pera      |       Valencia      |       Limit:")
writeln(1,"          |       ",getsol(product(2,1,1)),"           |       ",getsol(product(2,1,2)),
"         |       ",getsol(product(2,1,3)),"             |       ", getsol(demand(1,2)))
writeln(2,"          |       ",getsol(product(2,2,1)),"    |       ",getsol(product(2,2,2)),
"  |       ",getsol(product(2,2,3)),"            |       ", getsol(demand(2,2)))
writeln(3,"          |       ",getsol(product(2,3,1)),"    |       ",getsol(product(2,3,2)),
"  |       ",getsol(product(2,3,3)),"       |       ", getsol(demand(3,2)))

writeln("")
writeln("Final products in tonnes for Task 2:")
writeln("Month      |       Standard      |     Diary:")
writeln(1,"          |       ",sum(o in oranges)getsol(product(1,1,o)),"           |       ",sum(o in oranges)getsol(product(2,1,o)))
writeln(2,"          |       ",sum(o in oranges)getsol(product(1,2,o)),"          |       ",sum(o in oranges)getsol(product(2,2,o)))
writeln(3,"          |       ",sum(o in oranges)getsol(product(1,3,o)),"        |       ",sum(o in oranges)getsol(product(2,3,o)))

writeln("")
writeln("Ratios for Standard product Task 2:")
writeln("Month           |       Hamlin       |       Pera      |       Valencia:")
writeln(1,"               |       ",getsol(product(1,1,1))/sum(o in oranges)(getsol(product(1,1,o))),"     |       ",getsol(product(1,1,2))/sum(o in oranges)(getsol(product(1,1,o))),
"  |       ",getsol(product(1,1,3))/sum(o in oranges)(getsol(product(1,1,o))))
writeln(2,"               |       ",getsol(product(1,2,1))/sum(o in oranges)(getsol(product(1,2,o))),"         |       ",getsol(product(1,2,2))/sum(o in oranges)(getsol(product(1,2,o))),
"      |       ",getsol(product(1,2,3))/sum(o in oranges)(getsol(product(1,2,o))))
writeln(3,"               |       ",getsol(product(1,3,1))/sum(o in oranges)(getsol(product(1,3,o))),"         |       ",getsol(product(1,3,2))/sum(o in oranges)(getsol(product(1,3,o))),
"      |       ",getsol(product(1,3,3))/sum(o in oranges)(getsol(product(1,3,o))))

writeln("")
writeln("Ratios for Diary product Task 2:")
writeln("Month      |        Hamlin      |       Pera         |       Valencia:")
writeln(2,"          |       ",getsol(product(2,2,1))/sum(o in oranges)(getsol(product(2,2,o))),"    |       ",getsol(product(2,2,2))/sum(o in oranges)(getsol(product(2,2,o))),
"    |       ",getsol(product(2,2,3))/sum(o in oranges)(getsol(product(2,2,o))))
writeln(3,"          |       ",getsol(product(2,3,1))/sum(o in oranges)(getsol(product(2,3,o))),"          |       ",getsol(product(2,3,2))/sum(o in oranges)(getsol(product(2,3,o))),
" |       ",getsol(product(2,3,3))/sum(o in oranges)(getsol(product(2,3,o))))

writeln("")
writeln("Plants working time Task 2:")
forall(m in months) do
writeln(m," month, 1 - Yes, 0 - No:  ",getsol(plants(m)))
end-do

writeln("")
writeln("Total profit (Task 2) £ :", getobjval, " £")

!Task 3
writeln("")
writeln("Task 3")
writeln("")
forall(p in products, m in months) do
    truckloads_nonnegative(p,m):= truckloads(p,m) >=0
end-do
old_revenue:=getobjval

!Modifying inventory and capacity constraints to include truckloads
!inventory
    forall(p in products, o in oranges|o=3, m in months|m=1) do
        total_inventory(p,m,o):=  inventory(p,m,o) = tonnes(o)*((boxes(p,m,o)/1000)+truckloads(p,m))
    end-do
    forall(p in products, o in oranges|o=3, m in months|m>1) do
        total_inventory(p,m,o):=  inventory(p,m,o) = inventory(p,m-1,o) - product(p,m-1,o) + tonnes(o)*(boxes(p,m,o)/1000+truckloads(p,m))
    end-do
!lambda is integer
    forall(p in products, m in months) do
        truckloads_integers(p,m):= truckloads(p,m) is_integer
    end-do
!capacities
    forall(m in months) do
        capacity_constraint1(m):= sum(o in oranges,p in products)(boxes(p,m,o)*capacities(o)+capacities(3)*truckloads(p,m)*1000) <= 500000
    end-do

!fopen("lambda_profit.txt",F_OUTPUT)

writeln("lambda","       Profit","       Truckloads  Difference_profit")
while (lambda < 20000) do
maximise((maxreturn-sum(p in products, m in months)(truckloads(p,m))*lambda))
writeln(lambda,"         ",getobjval,"        ",getsol(sum(p in products, m in months)(truckloads(p,m))),"       ",getobjval-old_revenue)
!output in comments to check how many truckloads will be in each month for each product
!forall(m in months) do
!    writeln("month","   standard","     diary")
!    writeln(m,"         ",getsol(truckloads(1,m)),"         ",getsol(truckloads(2,m)))
!end-do
lambda:= lambda + 10
end-do

!fclose(F_OUTPUT)

END-MODEL
